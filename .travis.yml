sudo: false
dist: trusty

language: node_js

cache:
  yarn: true
  directories:
    - node_modules

node_js:
- "8"

env:
  - VUE_TEMPLATE_TEST=minimal
  - VUE_TEMPLATE_TEST=full
  - VUE_TEMPLATE_TEST=full-airbnb

before_install:
  - git remote set-branches --add origin master
  - git fetch
  # Yarn
  - curl -o- -L https://yarnpkg.com/install.sh | bash
  - export PATH="$HOME/.yarn/bin:$PATH"
  - yarn global add vue-cli
  # Utils
  - |
    # Stolen from https://github.com/symfony/symfony/blob/master/.travis.yml, thanks guys
    stty cols 120

    nanoseconds() {
        local cmd="date"
        local format="+%s%N"
        local os=$(uname)
        if hash gdate > /dev/null 2>&1; then
          cmd="gdate"
        elif [[ "$os" = Darwin ]]; then
          format="+%s000000000"
        fi
        $cmd -u $format
    }
    export -f nanoseconds

    # tfold is a helper to create folded reports
    tfold () {
        local title=$1
        local fold=$(echo $title | sed -r 's/[^-_A-Za-z0-9]+/./g')
        shift
        local id=$(printf %08x $(( RANDOM * RANDOM )))
        local start=$(nanoseconds)
        echo -e "travis_fold:start:$fold"
        echo -e "travis_time:start:$id"
        echo -e "\\e[1;34m$title\\e[0m"
        bash -xc "$*" 2>&1
        local ok=$?
        local end=$(nanoseconds)
        echo -e "\\ntravis_time:end:$id:start=$start,finish=$end,duration=$(($end-$start))"
        (exit $ok) &&
            echo -e "\\e[32mOK\\e[0m $title\\n\\ntravis_fold:end:$fold" ||
            echo -e "\\e[41mKO\\e[0m $title\\n"
        (exit $ok)
    }
    export -f tfold

install:
  - |
    classical_workflow () {
      set -e

      cd tests
      vue init .. extension-${VUE_TEMPLATE_TEST}

      cd extension-${VUE_TEMPLATE_TEST}
      tfold "Installing extension dependencies..." yarn
      tfold "Building extension..." yarn build
      tfold "Testing version behavior" ../test_version.sh
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping axios.\\e[0m"      || tfold "Testing axios..." ../test_axios.sh       || exit $?
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping vue-router.\\e[0m" || tfold "Testing vue-router..." ../test_router.sh || exit $?
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping vuex.\\e[0m"       || tfold "Testing vuex..." ../test_store.sh        || exit $?
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping linting.\\e[0m"    || tfold "Linting..." yarn lint --fix              || exit $?
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping prettying.\\e[0m"  || tfold "Prettying..." yarn prettier:write        || exit $?
    }

  - |
    dependabot_workflow() {
      set -e

      MODIFIED_FILES=$(git --no-pager diff --name-only origin/master)
      echo $MODIFIED_FILES

      SKIP_MINIMAL_BUILD=$("${MODIFIED_FILES}" = *"examples/minimal/"* && ! "${VUE_TEMPLATE_TEST}" = minimal)
      SKIP_FULL_BUILD=$("${MODIFIED_FILES}" = *"examples/full-airbnb/"* && ! "${VUE_TEMPLATE_TEST}" = full-airbnb)
      SKIP_FULL_AIRBNB_BUILD=$("${MODIFIED_FILES}" = *"examples/full/"* && ! "${VUE_TEMPLATE_TEST}" = full)

      echo $SKIP_MINIMAL_BUILD
      echo $SKIP_FULL_BUILD
      echo $SKIP_FULL_AIRBNB_BUILD

      if [[ SKIP_MINIMAL_BUILD || SKIP_FULL_BUILD || SKIP_FULL_AIRBNB_BUILD ]]; then 
        echo -e "\\e[1;34mSkipping building.\\e[0m"
        exit 0
      fi

      cd examples/${VUE_TEMPLATE_TEST}
      tfold "Installing extension dependencies..." yarn
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping linting.\\e[0m"   || tfold "Linting..." yarn lint --fix       || exit $?
      [[ ! "${VUE_TEMPLATE_TEST}" =~ ^full ]] && echo -e "\\e[1;34mSkipping prettying.\\e[0m" || tfold "Prettying..." yarn prettier:write || exit $?
      tfold "Building extension..." yarn build
    }

  - |
    run_tests () {
      if [[ "${TRAVIS_BRANCH}" =~ ^dependabot ]]; then
        echo -e "\\e[1;34mDependabot PR detected.\\e[0m"
        dependabot_workflow
        exit $?
      else
        classical_workflow
        exit $?
      fi
    }

script:
  - (run_tests)
